from __future__ import unicode_literals

from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import (
    Container, Field, FileDialogEx, Label, PushButton, Window,
    ObjectCombo, MultilineField, HGroup, VGroup, Separator, CheckBox,
    GroupBox, Form
)
from enaml.core.api import Include

import csv

enamldef Main(Window): window:
    attr plotter
    attr path : str = ""
    attr headers = []
    attr X = ""
    attr Y = ""
    attr pair = ()
    attr plotlist = []
    attr fcount = 0

    title = 'Live Plotter'
    Container: c1:
        constraints = [
            vbox(
                hbox(file_selection_options, header_options, overlay_options, plot_button, clear_btn),
                sep,
                hbox(vg1, vg2, vg3),
            ),

            width == 1000,
            file_selected_field.width == 0.250 * width,
            x_header_selection.width == 0.250 * width,
            # x_header_selection.width == 50,
            # header_options.width == 0.25*width,
            # align('v_center', file_label, file_selected_field, browse_button, plot_button, clear_btn),
            # contents_top == file_label.top,
            # contents_left == file_label.left,
            # file_selected_field.width == 0.10 * width,
            # overlay_options.top == contents_top,
            # print(x_header_selection.width),
            # browse_button.height == file_selected_field.height,
            # add_button.height == x_header_selection.height,
            # plot_button.height == x_header_selection.height,

            align('top', contents_top, file_selection_options, header_options, overlay_options,
                        plot_button, clear_btn),

            # align('width', file_selection_options, header_options, overlay_options),

            align('height', vg1, vg2, vg3),

            # align('right', clear_btn),

       
           
        ]
        GroupBox: file_selection_options:
            title = "File Selection"
            share_layout = True
            # constraints = [file_selected_field.width == 0.05 * width]

            Form: file_selection_form:
                share_layout = True
                # constraints = [file_selected_field.width == 0.05 * width]

                Label: file_label:
                    text = 'File:'
                Field: file_selected_field:
                    read_only = True
                    text << window.path
                PushButton: browse_button:
                    text = 'Browse'
                    clicked ::
                        path = FileDialogEx.get_open_file_name(window)
                        
                        #path initially returned with single forward slashes, need to replace with double back slash
                        path = plotter.convertfilepath(path)
                        window.path = path

                        #get headers of currently selected file to populate the X and Y drop down lists.
                        with open(path, newline='') as file:
                            reader = csv.reader(file, delimiter = '\t')
                            window.headers = next(reader) 

        GroupBox: header_options:
            title = "Data To Plot"
            share_layout = True
            Form: header_form:
                share_layout = True
                # column_spacing = 0
                Label: x_header_label:
                    text = 'X:'
                ObjectCombo: x_header_selection:
                    items << window.headers
                    selected := window.X
                Label: y_header_label:
                    text = 'Y:'
                ObjectCombo: y_header_selection:
                    items << window.headers
                    selected := window.Y

            PushButton: add_button:
                text = 'Add'
                clicked ::

                    window.fcount = window.fcount + 1
                    #add entered file and coords to list of files to plot.
                    inc1.objects.append(Field(text=str(window.path)))
                    inc2.objects.append(Field(text=window.X, hug_width="strong"))
                    inc3.objects.append(Field(text=window.Y, hug_width="strong"))
                    #inc4.objects.append(PushButton(text="Remove", hug_width="strong", clicked :: print(count)))
                
        GroupBox: overlay_options:
            title = "Overlay Options"
            share_layout = True
            Form: overlay_form:
                share_layout = True
                Label: plot_overlay_label:
                    text = 'Plot overlay:'
                CheckBox: plot_overlay_checkbox:
                    checked >> plotter.overlay_bool

                Label: cb_lbl:
                    text = "By column values"
                CheckBox: cb:
                    checked :: print('test')
        
        PushButton: plot_button:
                text = 'Plot'
                clicked ::
                    #construct the dict of files and coordinates to plot
                    for i in range(len(inc1.objects)):
                        window.plotlist.append([inc1.objects[i].text, (inc2.objects[i].text, inc3.objects[i].text)])

                    #hand the filedict given by the user to the plotter 
                    plotter.plotlist = window.plotlist

                    #start the plot
                    plotter.start_plot()

                    #clear plot list after plot
                    plotter.plotlist.clear()

        Separator: sep:
            pass

        VGroup: vg1:
            spacing = 2
            padding = 0
            Label: filelistlbl:
                text = "Files to plot:"
            Include: inc1:
                objects = []

        VGroup: vg2:
            spacing = 2
            padding = 0
            Label: xlistlbl:
                text = "X"
            Include: inc2:
                objects = []

        VGroup: vg3:
            spacing = 2
            padding = 0
            Label: ylistlbl:
                text = "Y"
            Include: inc3:
                objects = []

        PushButton: clear_btn:
            text = 'Clear All'
            clicked ::
                inc1.objects = []
                inc2.objects = []
                inc3.objects = []
                plotter.plotlist.clear()

        
            
