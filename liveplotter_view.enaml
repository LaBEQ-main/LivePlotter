# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Authors - Frank Duffy, LaBEQ / Sardashti Research Group, Clemson University
#
# Based on tutorials about matplotlib animate by Corey Schafer and multiprocessing
# by Engineer Man
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------

from __future__ import unicode_literals

from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import (
    Container, Field, FileDialogEx, Label, PushButton, Window,
    ObjectCombo, MultilineField, HGroup, VGroup, Separator
)
from enaml.core.api import Include

import csv

enamldef Main(Window): window:
    attr plotter
    attr path : str = ""
    attr headers = []
    attr X = ""
    attr Y = ""
    attr pair = ()
    attr plotlist = []
    attr fcount = 0

    title = 'Live Plotter'
    Container: c1:
        constraints = [
            vbox(
                hbox(lbl1, fld1, pb1, lbl2, ocx, lbl3, ocy, pb2, lbl4, oc1, pb3, clearbtn),
                sep,
                hbox(vg1, vg2, vg3),
            ),

            width == 1000,
            align('v_center', lbl1, fld1, pb1, lbl2, ocx, lbl3, ocy, pb2, lbl4, oc1, pb3, clearbtn),
            contents_top == lbl1.top,
            contents_left == lbl1.left,
            fld1.width == 0.30 * width,
            ocx.width == 0.10 * width,
            ocy.width == 0.10 * width,
            pb1.height == fld1.height,
            pb2.height == ocx.height,
            pb3.height == ocx.height,

            align('width', pb1, pb2, pb3, oc1, clearbtn),

            align('height', vg1, vg2, vg3),

            align('right', clearbtn),


       
           
        ]
        Label: lbl1:
            text = 'File:'
        Field: fld1:
            read_only = True
            text << window.path
        PushButton: pb1:
            text = 'Browse'
            clicked ::
                path = FileDialogEx.get_open_file_name(window)
                
                #path initially returned with single forward slashes, need to replace with double back slash
                path = plotter.convertfilepath(path)
                window.path = path

                #get headers of currently selected file to populate the X and Y drop down lists.
                with open(path, newline='') as file:
                    reader = csv.reader(file, delimiter = '\t')
                    window.headers = next(reader) 
                    
        Label: lbl2:
            text = 'X:'
        ObjectCombo: ocx:
            items << window.headers
            selected := window.X

        Label: lbl3:
            text = 'Y:'
        ObjectCombo: ocy:
            items << window.headers
            selected := window.Y

        PushButton: pb2:
            text = 'Add'
            clicked ::

                window.fcount = window.fcount + 1
                #add entered file and coords to list of files to plot.
                inc1.objects.append(Field(text=str(window.path)))
                inc2.objects.append(Field(text=window.X, hug_width="strong"))
                inc3.objects.append(Field(text=window.Y, hug_width="strong"))
                #inc4.objects.append(PushButton(text="Remove", hug_width="strong", clicked :: print(count)))
                
        Label: lbl4:
            text = 'Plot Overlay:'
        ObjectCombo: oc1:
            items = [True, False]
            selected := plotter.overlay_bool
        PushButton: pb3:
            text = 'Plot'
            clicked ::
                #construct the dict of files and coordinates to plot
                for i in range(len(inc1.objects)):
                    window.plotlist.append([inc1.objects[i].text, (inc2.objects[i].text, inc3.objects[i].text)])

                #hand the filedict given by the user to the plotter 
                plotter.plotlist = window.plotlist

                #start the plot
                plotter.start_plot()

                #clear plot list after plot
                plotter.plotlist.clear()
        
        Separator: sep:
            pass

        VGroup: vg1:
            spacing = 2
            padding = 0
            Label: filelistlbl:
                text = "Files to plot:"
            Include: inc1:
                objects = []

        VGroup: vg2:
            spacing = 2
            padding = 0
            Label: xlistlbl:
                text = "X"
            Include: inc2:
                objects = []

        VGroup: vg3:
            spacing = 2
            padding = 0
            Label: ylistlbl:
                text = "Y"
            Include: inc3:
                objects = []

        PushButton: clearbtn:
            text = 'Clear All'
            clicked ::
                inc1.objects = []
                inc2.objects = []
                inc3.objects = []
                plotter.plotlist.clear()

        
            
